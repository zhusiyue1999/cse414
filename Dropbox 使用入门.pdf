/**
   * Implement the search function.
   *
   * Searches for flights from the given origin city to the given destination city, on the given day
   * of the month. If {@code directFlight} is true, it only searches for direct flights, otherwise
   * is searches for direct flights and flights with two "hops." Only searches for up to the number
   * of itineraries given by {@code numberOfItineraries}.
   *
   * The results are sorted based on total flight time.
   *
   * @param originCity
   * @param destinationCity
   * @param directFlight        if true, then only search for direct flights, otherwise include
   *                            indirect flights as well
   * @param dayOfMonth
   * @param numberOfItineraries number of itineraries to return
   *
   * @return If no itineraries were found, return "No flights match your selection\n". If an error
   *         occurs, then return "Failed to search\n".
   *
   *         Otherwise, the sorted itineraries printed in the following format:
   *
   *         Itinerary [itinerary number]: [number of flights] flight(s), [total flight time]
   *         minutes\n [first flight in itinerary]\n ... [last flight in itinerary]\n
   *
   *         Each flight should be printed using the same format as in the {@code Flight} class.
   *         Itinerary numbers in each search should always start from 0 and increase by 1.
   *
   * @see Flight#toString()
   */
  public String transaction_search(String originCity, String destinationCity, boolean directFlight,
      int dayOfMonth, int numberOfItineraries) {
    try {
      // WARNING the below code is unsafe and only handles searches for direct flights
      // You can use the below code as a starting reference point or you can get rid
      // of it all and replace it with your own implementation.
      //
      // TODO: YOUR CODE HERE

      StringBuffer sb = new StringBuffer();

      try {
         if(directFlight) {
           // one hop itineraries
           String unsafeSearchSQL = "SELECT TOP (" + numberOfItineraries
               + ") day_of_month,carrier_id,flight_num,origin_city,dest_city,actual_time,capacity,price "
               + "FROM Flights " + "WHERE origin_city = \'" + originCity + "\' AND dest_city = \'"
               + destinationCity + "\' AND day_of_month =  " + dayOfMonth + " "
               + "ORDER BY actual_time ASC";
   
           Statement searchStatement = conn.createStatement();
           ResultSet oneHopResults = searchStatement.executeQuery(unsafeSearchSQL);
   
           while (oneHopResults.next()) {
             int result_dayOfMonth = oneHopResults.getInt("day_of_month");
             String result_carrierId = oneHopResults.getString("carrier_id");
             String result_flightNum = oneHopResults.getString("flight_num");
             String result_originCity = oneHopResults.getString("origin_city");
             String result_destCity = oneHopResults.getString("dest_city");
             int result_time = oneHopResults.getInt("actual_time");
             int result_capacity = oneHopResults.getInt("capacity");
             int result_price = oneHopResults.getInt("price");
   
             sb.append("Day: " + result_dayOfMonth + " Carrier: " + result_carrierId + " Number: "
                 + result_flightNum + " Origin: " + result_originCity + " Destination: "
                 + result_destCity + " Duration: " + result_time + " Capacity: " + result_capacity
                 + " Price: " + result_price + "\n");
           }
           oneHopResults.close();
         } else {
            String safeSearchSQL = +"SELECT TOP ("+ numberOfItineraries +")day_of_month,carrier_id,flight_num,"
            +"origin_city,dest_city,actual_time,capacity,price"
            +"FROM Flights AS f1, Flights AS f2"
            +"WHERE f1.origin_city = \'" + originCity + "\' and f1.dest_city = f2.origin_city and"
            +"f2.destcity = \'" + destinationCity + "\' and f1.day_of_month = dayOfMonth and"
            +"f2.day_of_month = " + dayOfMonth + " "
            +"ORDER BY actual_time ASC";

            Statement searchStatement = conn.createStatement();
            ResultSet oneHopResults = searchStatement.executeQuery(safeSearchSQL);

        
        
        
        
         }
      } catch (SQLException e) {
        e.printStackTrace();
      }

      return sb.toString();
    } finally {
      checkDanglingTransaction();
    }
}